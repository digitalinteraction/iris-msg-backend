users:
  name: Auth
  base: /users
  endpoints:
  - get: /me me
    info: Fetches the current authenticated user
  
  - post: /login/request login_request
    name: Request login
    info: |
      Requests a login sms to be sent and creates a new user if it doesn't exist
    body:
      phoneNumber: string - The local phone number of the user
      countryCode: string - The ISO_3166-2 country where the phone is
  
  - post: /login/check login_check
    name: Check login
    info: |
      Checks a login sms code and logs in the user and optionally verifies the user
    body:
      code: number - The sms code to check
  
  - post: /update_fcm update_fcm
    name: Set fcm token
    info: Updates the fcm token for the current user
    body:
      newToken: string - The updated fcm token

orgs:
  name: Organisations
  base: /organisations
  endpoints:
  - get: / index
    info: Fetches organisations the current user is part of
  
  - get: /:org_id show
    info: Fetches a specific organisation that the user is part of
    params:
      org_id: string - The id of the organisation ti fetch
  
  - post: / create
    info: Creates a new organisation with the current user as a coordinator
    body:
      name: string - The name of the new organisation
      info: string - A longer description of the new organisation
  
  - delete: /:org_id destroy
    info: Deletes an organisation (using a soft delete)
    params:
      org_id: string - The id of the delete

members:
  name: Membership
  base: /organisations/:org_id
  endpoints:
  - post: /members create
    info: Invites a member to an organisation
    params:
      org_id: string - The id of the organisation to be added to
    body:
      phoneNumber: string - The phone number of the person to invite
      countryCode: string - The ISO_3166-2 country where the phone is
      role: string - The role of the new user (coordinator|donor|subscriber)
  
  - delete: /members/:mem_id destroy
    info: Remove a member from an organisation (uses a soft delete)
    params:
      org_id: string - The id of the organisation to be removed from
      mem_id: string - The id of the membership to be removed
  
  - post: ../accept/:mem_id accept
    info: Accept an invitation to join an organisation and returns UserAuth
    params:
      org_id: string - The id of the organisation to join
      mem_id: string - The id of the membership being accepted
  
  - get: ../../unsub/:mem_id unsubscribe
    info: Unsubscribes a member from an organisation (uses a soft delete)
    params:
      mem_id: string - The id of the member to be unsubscribe
  
  - get: ../../invite/:mem_id deep_link
    info: Gets a deeplink redirection to accept an invite in the app
    params:
      mem_id: string - The id of the membership to link to

messages:
  name: Messages
  base: /messages
  endpoints:
  - get: / create
    info: Creates a message and sends out fcm `new_donations` messages to donors
    body:
      orgId: string - The id of the organisation to send to
      content: string - The message to be sent
  
  - get: /attempts attempts_index
    name: Pending Attempts
    info: Gets the pending messages you have to send as a donor
  
  - post: /attempts attempts_update
    name: Update Attempts
    info: Sets the state of a set of MessageAttempts
    body:
      updates: array - The updates to perform
      updates[n].attempt: string - The id of the attempt to update
      updates[n].newState: |
        string - The new state of the attempt (success|failed|rejected|no_service|no_sms_data|radio_off)
